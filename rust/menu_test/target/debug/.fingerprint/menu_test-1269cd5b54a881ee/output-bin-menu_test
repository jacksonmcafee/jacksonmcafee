{"message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4069,"byte_end":4085,"line_start":139,"line_end":139,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"            let __try_read_var__;","highlight_start":17,"highlight_end":33}],"label":"consider giving `__try_read_var__` a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3948,"byte_end":3971,"line_start":136,"line_end":136,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6549,"byte_end":6576,"line_start":216,"line_end":216,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":384,"byte_end":391,"line_start":22,"line_end":22,"column_start":30,"column_end":37,"is_primary":false,"text":[{"text":"    let temp_input: String = read!().to_lowercase();","highlight_start":30,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6499,"byte_end":6595,"line_start":214,"line_end":218,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6577,"byte_end":6583,"line_start":216,"line_end":216,"column_start":37,"column_end":43,"is_primary":true,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":37,"highlight_end":43}],"label":"cannot infer type for type parameter `T`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":384,"byte_end":391,"line_start":22,"line_end":22,"column_start":30,"column_end":37,"is_primary":false,"text":[{"text":"    let temp_input: String = read!().to_lowercase();","highlight_start":30,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6499,"byte_end":6595,"line_start":214,"line_end":218,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"type must be known at this point","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let temp_input: String = read!().to_lowercase();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider giving `__try_read_var__` a type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type parameter `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: type must be known at this point\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `read` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0282`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0282`.\u001b[0m\n"}
