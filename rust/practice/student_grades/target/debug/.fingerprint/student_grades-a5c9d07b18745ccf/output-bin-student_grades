{"message":"unresolved import `crate::structures::Subject`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/structures/struct_functions.rs","byte_start":99,"byte_end":106,"line_start":5,"line_end":5,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"use crate::structures::Subject::*;","highlight_start":24,"highlight_end":31}],"label":"could not find `Subject` in `structures`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::structures::Subject`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures/struct_functions.rs:5:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::structures::Subject::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `Subject` in `structures`\u001b[0m\n\n"}
{"message":"cannot find type `Subject` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/structures.rs","byte_start":320,"byte_end":337,"line_start":23,"line_end":23,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"pub enum Subjects {","highlight_start":1,"highlight_end":18}],"label":"similarly named enum `Subjects` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/structures/struct_functions.rs","byte_start":764,"byte_end":771,"line_start":31,"line_end":31,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn add_course(enum_param: Subject) -> Course {","highlight_start":35,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"an enum with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/structures/struct_functions.rs","byte_start":764,"byte_end":771,"line_start":31,"line_end":31,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn add_course(enum_param: Subject) -> Course {","highlight_start":35,"highlight_end":42}],"label":null,"suggested_replacement":"Subjects","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Subject` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures/struct_functions.rs:31:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_course(enum_param: Subject) -> Course {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: an enum with a similar name exists: `Subjects`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/structures.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub enum Subjects {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named enum `Subjects` defined here\u001b[0m\n\n"}
{"message":"variant `Social_Studies` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/structures.rs","byte_start":374,"byte_end":388,"line_start":26,"line_end":26,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    Social_Studies,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/structures.rs","byte_start":374,"byte_end":388,"line_start":26,"line_end":26,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    Social_Studies,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":"SocialStudies","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `Social_Studies` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures.rs:26:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Social_Studies,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `SocialStudies`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"variant `English_Lang` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/structures.rs","byte_start":394,"byte_end":406,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    English_Lang,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/structures.rs","byte_start":394,"byte_end":406,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    English_Lang,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"EnglishLang","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `English_Lang` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    English_Lang,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `EnglishLang`\u001b[0m\n\n"}
{"message":"variant `Foreign_Lang` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/structures.rs","byte_start":412,"byte_end":424,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    Foreign_Lang,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/structures.rs","byte_start":412,"byte_end":424,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    Foreign_Lang,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"ForeignLang","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `Foreign_Lang` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Foreign_Lang,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `ForeignLang`\u001b[0m\n\n"}
{"message":"variant `Fine_Arts` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/structures.rs","byte_start":430,"byte_end":439,"line_start":29,"line_end":29,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Fine_Arts,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/structures.rs","byte_start":430,"byte_end":439,"line_start":29,"line_end":29,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Fine_Arts,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"FineArts","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `Fine_Arts` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Fine_Arts,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `FineArts`\u001b[0m\n\n"}
{"message":"variant `Applied_Arts` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/structures.rs","byte_start":445,"byte_end":457,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    Applied_Arts,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/structures.rs","byte_start":445,"byte_end":457,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    Applied_Arts,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"AppliedArts","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `Applied_Arts` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Applied_Arts,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AppliedArts`\u001b[0m\n\n"}
{"message":"`structures::Person` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4124,"byte_end":4140,"line_start":140,"line_end":140,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":38,"highlight_end":54}],"label":"`structures::Person` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6387,"byte_end":6420,"line_start":208,"line_end":208,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        format_args!($pattern, $($arg),*);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":5026,"byte_end":5095,"line_start":173,"line_end":173,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4851,"byte_end":4952,"line_start":170,"line_end":170,"column_start":9,"column_end":110,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4099,"byte_end":4141,"line_start":140,"line_end":140,"column_start":13,"column_end":55,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3948,"byte_end":3971,"line_start":136,"line_end":136,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6549,"byte_end":6576,"line_start":216,"line_end":216,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/structures/struct_functions.rs","byte_start":991,"byte_end":998,"line_start":37,"line_end":37,"column_start":25,"column_end":32,"is_primary":false,"text":[{"text":"            instructor: read!(),","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6499,"byte_end":6595,"line_start":214,"line_end":218,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":{"file_name":"/rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/core/src/macros/mod.rs","byte_start":30089,"byte_end":30243,"line_start":875,"line_end":878,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `structures::Person`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `structures::Person` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures/struct_functions.rs:37:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            instructor: read!(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`structures::Person` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `structures::Person`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `structures::Person: FromStr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":5980,"byte_end":5993,"line_start":196,"line_end":196,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":67,"highlight_end":80}],"label":"the trait `FromStr` is not implemented for `structures::Person`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":5026,"byte_end":5095,"line_start":173,"line_end":173,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4851,"byte_end":4952,"line_start":170,"line_end":170,"column_start":9,"column_end":110,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4099,"byte_end":4141,"line_start":140,"line_end":140,"column_start":13,"column_end":55,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3948,"byte_end":3971,"line_start":136,"line_end":136,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6549,"byte_end":6576,"line_start":216,"line_end":216,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/structures/struct_functions.rs","byte_start":991,"byte_end":998,"line_start":37,"line_end":37,"column_start":25,"column_end":32,"is_primary":false,"text":[{"text":"            instructor: read!(),","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":6499,"byte_end":6595,"line_start":214,"line_end":218,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":3913,"byte_end":4444,"line_start":135,"line_end":151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":4750,"byte_end":6432,"line_start":167,"line_end":210,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by a bound in `parse_capture`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs","byte_start":2647,"byte_end":2654,"line_start":92,"line_end":92,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    T: FromStr,","highlight_start":8,"highlight_end":15}],"label":"required by this bound in `parse_capture`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `structures::Person: FromStr` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/structures/struct_functions.rs:37:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            instructor: read!(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStr` is not implemented for `structures::Person`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parse_capture`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/jacksonm/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.10/src/lib.rs:92:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: FromStr,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `parse_capture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::try_scan` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0412, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0412, E0432.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
